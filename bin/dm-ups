#!/usr/bin/env python3
#Author Manhong Dai, MNI, U of Michigan
import socket, sys, telnetlib, argparse
def read_status(s, result):
	idx = s.find(':')
	if idx == -1: return
	key, value = s[:idx].strip(), s[idx+1:].strip()
	if key == 'U1': #20.0C:OK
		value = value.replace('C', ' C').replace(':', ' ')
	elif key == 'Runtime Remaining': #24 hr 0 min 0 sec
		fs = value.split()
		if len(fs) == 6:
			if fs[1] != 'hr'  or fs[3] != 'min' or fs[5] != 'sec': raise Exception('ERR-100')
			value = f'{int(fs[0]) * 60 + int(fs[2])} min'
		elif len(fs) == 2:
			if fs[1] != 'min': raise Exception('ERR-101')
	elif key == 'Battery Temperature': #20.0 C, 68.0 F
		value = value[:value.index(',')]
	result[key] = value
def get_args_opts():
	parser = argparse.ArgumentParser()
	parser.add_argument("-V", "--version", action='version', version='20220128')
	parser.add_argument("-u", "--username", required=True)
	parser.add_argument("-p", "--password", required=True)
	parser.add_argument("ups")
#3.5.8
	parser.add_argument("--ups-firmware")
	parser.add_argument("--Apparent-Load-Power", metavar=':MAX')
	parser.add_argument("--Battery-Temperature", metavar=':MAX')
	parser.add_argument("--Battery-Voltage", metavar='MIN:MAX')
	parser.add_argument("--Input-Frequency", metavar='MIN:MAX')
	parser.add_argument("--Input-Voltage", metavar='MIN:MAX')
	parser.add_argument("--Load-Power", metavar=':MAX')
	parser.add_argument("--Internal-Temp", metavar='MIN:MAX')
	parser.add_argument("--Min-Line-Voltage", metavar='MIN:MAX')
	parser.add_argument("--Max-Line-Voltage", metavar='MIN:MAX')
	parser.add_argument("--Output-Current", metavar=':MAX')
	parser.add_argument("--Output-Efficiency", metavar='ANY')
	parser.add_argument("--Output-Energy", metavar=':MAX')
	parser.add_argument("--Output-Frequency", metavar='MIN:MAX')
	parser.add_argument("--Output-VA-Percent", metavar=':MAX')
	parser.add_argument("--Output-Voltage", metavar='MIN:MAX')
	parser.add_argument("--Output-Watts-Percent", metavar='MIN:MAX')
	parser.add_argument("--Runtime-Remaining", metavar='MIN:')
	parser.add_argument("--Self-Test-Date", dest='Self-Test_Date', metavar='ANY')
	parser.add_argument("--Next-Battery-Replacement-Date", metavar='ANY')
#6.6.4
	parser.add_argument("--U1", metavar='MIN:MAX')
#
	args = parser.parse_args()
	opts = {}
	for k, v in vars(args).items():
		if k in [ 'ups', 'ups_firmware', 'username', 'password']:
			continue
		min_max = v
		if min_max == None:
			continue
		elif min_max[0] == ':':
			min_max = [None, float(min_max[1:])]
		elif min_max[-1] == ':':
			min_max = [float(min_max[:-1]), None]
		elif min_max not in ['ANY']:
			min_max = [float(s) for s in min_max.split(':')]
		opts[k.replace('_', ' ')] = min_max
	return args, opts
def get_status(args, opts):
	tn = telnetlib.Telnet(args.ups)
#	tn.set_debuglevel(10)
	tn.read_until(b'User Name :')
	tn.write(f'{args.username}\r'.encode('ascii'))
	tn.read_until(b'Password  :')
	tn.write(f'{args.password}\r'.encode('ascii'))
	result = {}
	if args.ups_firmware == '6.6.4':
		tn.read_until(b'apc>')
		tn.write(b'detstatus -all\r')
		status = tn.read_until(b'apc>')
		tn.write(b'uio -st\r')
		status += tn.read_until(b'apc>')
		tn.write(b'quit\r')
		tn.read_until(b'Connection Closed - Bye')
		tn.close()
		for ln in status.decode("utf-8").split('\n'):
			read_status(ln, result)
	elif args.ups_firmware == '3.5.8':
		tn.read_until(b'     <ESC>- Main Menu, <ENTER>- Refresh, <CTRL-L>- Event Log')
		tn.write(b'1\r')
		tn.read_until(b'     <ESC>- Back, <ENTER>- Refresh, <CTRL-L>- Event Log')
		tn.write(b'1\r')
		status = tn.read_until(b'     <ESC>- Back, <ENTER>- Refresh, <CTRL-L>- Event Log')
		tn.write(b'\x1b')
		tn.read_until(b'     <ESC>- Back, <ENTER>- Refresh, <CTRL-L>- Event Log')
		tn.write(b'\x1b')
		tn.read_until(b'     <ESC>- Main Menu, <ENTER>- Refresh, <CTRL-L>- Event Log')
		tn.write(b'4\r')
		tn.read_until(b'Connection Closed - Bye')
		tn.close()
		for ln in status.decode("utf-8").split('\n'):
			if ln.find(':') == ln.rfind(':'):
				read_status(ln, result)
			else:
				read_status(ln[:45], result)
				read_status(ln[45:], result)
	else:
		raise Exception('ERR-003: unsupported UPS firmware version')
	return result
def main():
	args, opts = get_args_opts()
	result = get_status(args, opts)
	for key, val in sorted(result.items()):
		min_max = opts.pop(key, None)
		if min_max == 'ANY':
			continue
		elif min_max != None:
			number = float(val[:val.index(' ')])
			if min_max[0] == None:
				if number <= min_max[1]:
					val = '<=%g%s' % (min_max[1], val[val.index(' '):])
			elif min_max[1] == None:
				if number >= min_max[0]:
					val = '>=%g%s' % (min_max[0], val[val.index(' '):])
			else:
				if number >= min_max[0] and number <= min_max[1]:
					val = '%g-%g%s' % (min_max[0], min_max[1], val[val.index(' '):])
		print('%-20s:' % key, val)
	if len(opts) > 0:
		raise Exception('ERR-004: wrong option: ' + str(opts))
if __name__ == '__main__': main()
